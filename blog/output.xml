<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20150531 18:26:18.476" generator="Robot 2.9.dev20150410 (Python 2.7.6 on linux2)">
<suite source="/home/tsubo/devel/robotframework_for_openstack/tests" id="s1" name="Tests">
<kw type="setup" name="Start Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>KeyStoneSession</arg>
<arg>http://${OPENSTACK}:5000</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20150531 18:26:22.537" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:22.538" starttime="20150531 18:26:22.361"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post">
<doc>Send a POST request on the session object found using the given `alias`</doc>
<arguments>
<arg>KeyStoneSession</arg>
<arg>/v2.0/tokens</arg>
<arg>${UserInfo}</arg>
</arguments>
<msg timestamp="20150531 18:26:23.029" level="INFO">Starting new HTTP connection (1): 127.0.0.1</msg>
<msg timestamp="20150531 18:26:26.521" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20150531 18:26:26.518" starttime="20150531 18:26:22.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20150531 18:26:26.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:26.523" starttime="20150531 18:26:26.521"></status>
</kw>
<kw type="kw" name="${result} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20150531 18:26:26.525" level="INFO">${result} = {u'access': {u'token': {u'issued_at': u'2015-05-31T09:26:26.080224', u'expires': u'2015-05-31T10:26:25Z', u'id': u'c01805c101cb4ea98f04c1a6f3e825b5', u'tenant': {u'enabled': True, u'description': None...</msg>
<status status="PASS" endtime="20150531 18:26:26.525" starttime="20150531 18:26:26.523"></status>
</kw>
<kw type="kw" name="${result} = Collections.Get From Dictionary">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>access</arg>
</arguments>
<msg timestamp="20150531 18:26:26.526" level="INFO">${result} = {u'token': {u'issued_at': u'2015-05-31T09:26:26.080224', u'expires': u'2015-05-31T10:26:25Z', u'id': u'c01805c101cb4ea98f04c1a6f3e825b5', u'tenant': {u'enabled': True, u'description': None, u'name': u...</msg>
<status status="PASS" endtime="20150531 18:26:26.526" starttime="20150531 18:26:26.525"></status>
</kw>
<kw type="kw" name="${result} = Collections.Get From Dictionary">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>token</arg>
</arguments>
<msg timestamp="20150531 18:26:26.527" level="INFO">${result} = {u'issued_at': u'2015-05-31T09:26:26.080224', u'expires': u'2015-05-31T10:26:25Z', u'id': u'c01805c101cb4ea98f04c1a6f3e825b5', u'tenant': {u'enabled': True, u'description': None, u'name': u'admin', u'...</msg>
<status status="PASS" endtime="20150531 18:26:26.527" starttime="20150531 18:26:26.526"></status>
</kw>
<kw type="kw" name="${TOKEN} = Collections.Get From Dictionary">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>id</arg>
</arguments>
<msg timestamp="20150531 18:26:26.528" level="INFO">${TOKEN} = c01805c101cb4ea98f04c1a6f3e825b5</msg>
<status status="PASS" endtime="20150531 18:26:26.528" starttime="20150531 18:26:26.527"></status>
</kw>
<kw type="kw" name="${X-AUTH} = BuiltIn.Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>X-Auth-Token=${TOKEN}</arg>
<arg>Content-Type=application/json</arg>
</arguments>
<msg timestamp="20150531 18:26:26.533" level="INFO">${X-AUTH} = {u'X-Auth-Token': u'c01805c101cb4ea98f04c1a6f3e825b5', u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20150531 18:26:26.533" starttime="20150531 18:26:26.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${X-AUTH}</arg>
</arguments>
<msg timestamp="20150531 18:26:26.543" level="INFO">${X-AUTH} = {u'X-Auth-Token': u'c01805c101cb4ea98f04c1a6f3e825b5', u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20150531 18:26:26.544" starttime="20150531 18:26:26.543"></status>
</kw>
<status status="PASS" endtime="20150531 18:26:26.544" starttime="20150531 18:26:22.355"></status>
</kw>
<suite source="/home/tsubo/devel/robotframework_for_openstack/tests/010__networks.robot" id="s1-s1" name="Networks">
<kw type="setup" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>OSSession</arg>
<arg>http://${OPENSTACK}:9696</arg>
<arg>headers=${X-AUTH}</arg>
</arguments>
<msg timestamp="20150531 18:26:26.607" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:26.608" starttime="20150531 18:26:26.595"></status>
</kw>
<test id="s1-s1-t1" name="Check OpenStack Networks">
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${X-AUTH}</arg>
</arguments>
<msg timestamp="20150531 18:26:26.620" level="INFO">{u'X-Auth-Token': u'c01805c101cb4ea98f04c1a6f3e825b5', u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20150531 18:26:26.620" starttime="20150531 18:26:26.619"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Get">
<doc>Send a GET request on the session object found using the given `alias`</doc>
<arguments>
<arg>OSSession</arg>
<arg>${OSREST}</arg>
</arguments>
<msg timestamp="20150531 18:26:26.626" level="INFO">Starting new HTTP connection (1): 127.0.0.1</msg>
<msg timestamp="20150531 18:26:27.844" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20150531 18:26:27.843" starttime="20150531 18:26:26.621"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20150531 18:26:27.849" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:27.849" starttime="20150531 18:26:27.846"></status>
</kw>
<kw type="kw" name="${OSResult} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20150531 18:26:27.851" level="INFO">${OSResult} = {u'networks': [{u'status': u'ACTIVE', u'subnets': [u'9d7eba48-2411-4b63-8584-8409a4677596'], u'name': u'test_network', u'provider:physical_network': None, u'router:external': False, u'tenant_id': u'a7...</msg>
<status status="PASS" endtime="20150531 18:26:27.851" starttime="20150531 18:26:27.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${OSResult}</arg>
</arguments>
<msg timestamp="20150531 18:26:27.852" level="INFO">${OSResult} = {u'networks': [{u'status': u'ACTIVE', u'subnets': [u'9d7eba48-2411-4b63-8584-8409a4677596'], u'name': u'test_network', u'provider:physical_network': None, u'router:external': False, u'tenant_id': u'a7...</msg>
<status status="PASS" endtime="20150531 18:26:27.853" starttime="20150531 18:26:27.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${OSResult}</arg>
</arguments>
<msg timestamp="20150531 18:26:27.854" level="INFO">{u'networks': [{u'status': u'ACTIVE', u'subnets': [u'9d7eba48-2411-4b63-8584-8409a4677596'], u'name': u'test_network', u'provider:physical_network': None, u'router:external': False, u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'admin_state_up': True, u'provider:network_type': u'vxlan', u'port_security_enabled': True, u'shared': False, u'mtu': 0, u'id': u'0de3ed6a-0a71-4b4b-a2fa-539053a3cc2b', u'provider:segmentation_id': 1035}, {u'status': u'ACTIVE', u'subnets': [u'577c2353-6490-4a9b-9bb5-da3f2f22883b', u'7bb2052d-b5fa-4ece-81d3-c4af7b1f9489'], u'name': u'public', u'provider:physical_network': None, u'router:external': True, u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'admin_state_up': True, u'provider:network_type': u'vxlan', u'port_security_enabled': True, u'shared': False, u'mtu': 0, u'id': u'7b339463-bde2-4fba-aa9e-99e71c4d5bd6', u'provider:segmentation_id': 1084}, {u'status': u'ACTIVE', u'subnets': [u'24585fe9-41c7-484e-9320-cda30c8e97c2', u'8f353f1a-3534-4a10-99f8-f4d35072834d'], u'name': u'private', u'provider:physical_network': None, u'router:external': False, u'tenant_id': u'69095fd2f05542c1a156b45064a9f689', u'admin_state_up': True, u'provider:network_type': u'vxlan', u'port_security_enabled': True, u'shared': False, u'mtu': 0, u'id': u'9f619f06-e89b-4900-a557-0ccf481694c4', u'provider:segmentation_id': 1026}]}</msg>
<status status="PASS" endtime="20150531 18:26:27.854" starttime="20150531 18:26:27.853"></status>
</kw>
<doc>Checking OpenStack Neutron for known networks</doc>
<tags>
<tag>Network Neutron OpenStack</tag>
</tags>
<status status="PASS" endtime="20150531 18:26:27.855" critical="yes" starttime="20150531 18:26:26.608"></status>
</test>
<test id="s1-s1-t2" name="Create Network">
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${postNet}</arg>
</arguments>
<msg timestamp="20150531 18:26:27.866" level="INFO">{"network":{"name":"test_network","admin_state_up":true}}</msg>
<status status="PASS" endtime="20150531 18:26:27.866" starttime="20150531 18:26:27.865"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post">
<doc>Send a POST request on the session object found using the given `alias`</doc>
<arguments>
<arg>OSSession</arg>
<arg>${OSREST}</arg>
<arg>data=${postNet}</arg>
</arguments>
<msg timestamp="20150531 18:26:27.983" level="INFO">${resp} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20150531 18:26:27.983" starttime="20150531 18:26:27.866"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20150531 18:26:27.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:27.985" starttime="20150531 18:26:27.984"></status>
</kw>
<kw type="kw" name="${result} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20150531 18:26:27.988" level="INFO">${result} = {u'network': {u'status': u'ACTIVE', u'subnets': [], u'name': u'test_network', u'provider:physical_network': None, u'router:external': False, u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'admin_...</msg>
<status status="PASS" endtime="20150531 18:26:27.987" starttime="20150531 18:26:27.986"></status>
</kw>
<kw type="kw" name="${result} = Collections.Get From Dictionary">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>network</arg>
</arguments>
<msg timestamp="20150531 18:26:27.989" level="INFO">${result} = {u'status': u'ACTIVE', u'subnets': [], u'name': u'test_network', u'provider:physical_network': None, u'router:external': False, u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'admin_state_up': Tr...</msg>
<status status="PASS" endtime="20150531 18:26:27.989" starttime="20150531 18:26:27.989"></status>
</kw>
<kw type="kw" name="${NETID} = Collections.Get From Dictionary">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>id</arg>
</arguments>
<msg timestamp="20150531 18:26:27.991" level="INFO">${NETID} = e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6</msg>
<status status="PASS" endtime="20150531 18:26:27.991" starttime="20150531 18:26:27.990"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20150531 18:26:27.993" level="INFO">{u'status': u'ACTIVE', u'subnets': [], u'name': u'test_network', u'provider:physical_network': None, u'router:external': False, u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'admin_state_up': True, u'provider:network_type': u'vxlan', u'port_security_enabled': True, u'shared': False, u'mtu': 0, u'id': u'e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6', u'provider:segmentation_id': 1031}</msg>
<status status="PASS" endtime="20150531 18:26:27.993" starttime="20150531 18:26:27.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${NETID}</arg>
</arguments>
<msg timestamp="20150531 18:26:27.994" level="INFO">e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6</msg>
<status status="PASS" endtime="20150531 18:26:27.994" starttime="20150531 18:26:27.994"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${NETID}</arg>
</arguments>
<msg timestamp="20150531 18:26:27.995" level="INFO">${NETID} = e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6</msg>
<status status="PASS" endtime="20150531 18:26:27.995" starttime="20150531 18:26:27.995"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20150531 18:26:30.000" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20150531 18:26:30.000" starttime="20150531 18:26:27.997"></status>
</kw>
<doc>Create new network in OpenStack</doc>
<tags>
<tag>Create Network OpenStack Neutron</tag>
</tags>
<status status="PASS" endtime="20150531 18:26:30.001" critical="yes" starttime="20150531 18:26:27.863"></status>
</test>
<test id="s1-s1-t3" name="Check Network">
<kw type="kw" name="${resp} = RequestsLibrary.Get">
<doc>Send a GET request on the session object found using the given `alias`</doc>
<arguments>
<arg>OSSession</arg>
<arg>${OSREST}/${NetID}</arg>
</arguments>
<msg timestamp="20150531 18:26:30.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20150531 18:26:30.054" starttime="20150531 18:26:30.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20150531 18:26:30.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:30.058" starttime="20150531 18:26:30.055"></status>
</kw>
<doc>Check Network created in OpenStack</doc>
<tags>
<tag>Check</tag>
<tag>Network</tag>
<tag>OpenStack Neutron</tag>
</tags>
<status status="PASS" endtime="20150531 18:26:30.059" critical="yes" starttime="20150531 18:26:30.003"></status>
</test>
<kw type="teardown" name="RequestsLibrary.Delete All Sessions">
<doc>Removes all the session objects</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150531 18:26:30.065" starttime="20150531 18:26:30.063"></status>
</kw>
<doc>Checking Network created in OpenStack</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20150531 18:26:30.065" starttime="20150531 18:26:26.547"></status>
</suite>
<suite source="/home/tsubo/devel/robotframework_for_openstack/tests/020__subnets.robot" id="s1-s2" name="Subnets">
<kw type="setup" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>OSSession</arg>
<arg>http://${OPENSTACK}:9696</arg>
<arg>headers=${X-AUTH}</arg>
</arguments>
<msg timestamp="20150531 18:26:30.105" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:30.109" starttime="20150531 18:26:30.100"></status>
</kw>
<test id="s1-s2-t1" name="Check OpenStack Subnets">
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${X-AUTH}</arg>
</arguments>
<msg timestamp="20150531 18:26:30.114" level="INFO">{u'X-Auth-Token': u'c01805c101cb4ea98f04c1a6f3e825b5', u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20150531 18:26:30.114" starttime="20150531 18:26:30.113"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Get">
<doc>Send a GET request on the session object found using the given `alias`</doc>
<arguments>
<arg>OSSession</arg>
<arg>${OSREST}</arg>
</arguments>
<msg timestamp="20150531 18:26:30.119" level="INFO">Starting new HTTP connection (1): 127.0.0.1</msg>
<msg timestamp="20150531 18:26:30.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20150531 18:26:30.181" starttime="20150531 18:26:30.116"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20150531 18:26:30.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:30.183" starttime="20150531 18:26:30.182"></status>
</kw>
<kw type="kw" name="${OSResult} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20150531 18:26:30.189" level="INFO">${OSResult} = {u'subnets': [{u'name': u'private-subnet', u'enable_dhcp': True, u'network_id': u'9f619f06-e89b-4900-a557-0ccf481694c4', u'tenant_id': u'69095fd2f05542c1a156b45064a9f689', u'dns_nameservers': [], u'ip...</msg>
<status status="PASS" endtime="20150531 18:26:30.188" starttime="20150531 18:26:30.183"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${OSResult}</arg>
</arguments>
<msg timestamp="20150531 18:26:30.192" level="INFO">${OSResult} = {u'subnets': [{u'name': u'private-subnet', u'enable_dhcp': True, u'network_id': u'9f619f06-e89b-4900-a557-0ccf481694c4', u'tenant_id': u'69095fd2f05542c1a156b45064a9f689', u'dns_nameservers': [], u'ip...</msg>
<status status="PASS" endtime="20150531 18:26:30.196" starttime="20150531 18:26:30.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${OSResult}</arg>
</arguments>
<msg timestamp="20150531 18:26:30.199" level="INFO">{u'subnets': [{u'name': u'private-subnet', u'enable_dhcp': True, u'network_id': u'9f619f06-e89b-4900-a557-0ccf481694c4', u'tenant_id': u'69095fd2f05542c1a156b45064a9f689', u'dns_nameservers': [], u'ipv6_ra_mode': None, u'allocation_pools': [{u'start': u'10.0.0.2', u'end': u'10.0.0.254'}], u'gateway_ip': u'10.0.0.1', u'ipv6_address_mode': None, u'ip_version': 4, u'host_routes': [], u'cidr': u'10.0.0.0/24', u'id': u'24585fe9-41c7-484e-9320-cda30c8e97c2', u'subnetpool_id': None}, {u'name': u'public-subnet', u'enable_dhcp': False, u'network_id': u'7b339463-bde2-4fba-aa9e-99e71c4d5bd6', u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'dns_nameservers': [], u'ipv6_ra_mode': None, u'allocation_pools': [{u'start': u'172.24.4.2', u'end': u'172.24.4.254'}], u'gateway_ip': u'172.24.4.1', u'ipv6_address_mode': None, u'ip_version': 4, u'host_routes': [], u'cidr': u'172.24.4.0/24', u'id': u'577c2353-6490-4a9b-9bb5-da3f2f22883b', u'subnetpool_id': None}, {u'name': u'ipv6-public-subnet', u'enable_dhcp': False, u'network_id': u'7b339463-bde2-4fba-aa9e-99e71c4d5bd6', u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'dns_nameservers': [], u'ipv6_ra_mode': None, u'allocation_pools': [{u'start': u'2001:db8::1', u'end': u'2001:db8::1'}, {u'start': u'2001:db8::3', u'end': u'2001:db8::ffff:ffff:ffff:fffe'}], u'gateway_ip': u'2001:db8::2', u'ipv6_address_mode': None, u'ip_version': 6, u'host_routes': [], u'cidr': u'2001:db8::/64', u'id': u'7bb2052d-b5fa-4ece-81d3-c4af7b1f9489', u'subnetpool_id': None}, {u'name': u'ipv6-private-subnet', u'enable_dhcp': True, u'network_id': u'9f619f06-e89b-4900-a557-0ccf481694c4', u'tenant_id': u'69095fd2f05542c1a156b45064a9f689', u'dns_nameservers': [], u'ipv6_ra_mode': u'slaac', u'allocation_pools': [{u'start': u'fd71:1353:9363::2', u'end': u'fd71:1353:9363:0:ffff:ffff:ffff:fffe'}], u'gateway_ip': u'fd71:1353:9363::1', u'ipv6_address_mode': u'slaac', u'ip_version': 6, u'host_routes': [], u'cidr': u'fd71:1353:9363::/64', u'id': u'8f353f1a-3534-4a10-99f8-f4d35072834d', u'subnetpool_id': None}, {u'name': u'', u'enable_dhcp': True, u'network_id': u'0de3ed6a-0a71-4b4b-a2fa-539053a3cc2b', u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'dns_nameservers': [], u'ipv6_ra_mode': None, u'allocation_pools': [{u'start': u'172.16.64.20', u'end': u'172.16.64.120'}], u'gateway_ip': u'172.16.64.1', u'ipv6_address_mode': None, u'ip_version': 4, u'host_routes': [], u'cidr': u'172.16.64.0/24', u'id': u'9d7eba48-2411-4b63-8584-8409a4677596', u'subnetpool_id': None}]}</msg>
<status status="PASS" endtime="20150531 18:26:30.199" starttime="20150531 18:26:30.198"></status>
</kw>
<doc>Checking OpenStack Neutron for known Subnets</doc>
<tags>
<tag>Subnets Neutron OpenStack</tag>
</tags>
<status status="PASS" endtime="20150531 18:26:30.204" critical="yes" starttime="20150531 18:26:30.109"></status>
</test>
<test id="s1-s2-t2" name="Create New subnet">
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20150531 18:26:30.213" level="INFO">{"subnet":{"network_id":"e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6","ip_version":4,"cidr":"172.16.64.0/24","allocation_pools":[{"start":"172.16.64.20","end":"172.16.64.120"}]}}</msg>
<status status="PASS" endtime="20150531 18:26:30.214" starttime="20150531 18:26:30.213"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post">
<doc>Send a POST request on the session object found using the given `alias`</doc>
<arguments>
<arg>OSSession</arg>
<arg>${OSREST}</arg>
<arg>data=${data}</arg>
</arguments>
<msg timestamp="20150531 18:26:30.532" level="INFO">${resp} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20150531 18:26:30.532" starttime="20150531 18:26:30.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20150531 18:26:30.534" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:30.534" starttime="20150531 18:26:30.533"></status>
</kw>
<kw type="kw" name="${result} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20150531 18:26:30.539" level="INFO">${result} = {u'subnet': {u'name': u'', u'enable_dhcp': True, u'network_id': u'e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6', u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'dns_nameservers': [], u'ipv6_ra_mode': Non...</msg>
<status status="PASS" endtime="20150531 18:26:30.538" starttime="20150531 18:26:30.537"></status>
</kw>
<kw type="kw" name="${result} = Collections.Get From Dictionary">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>subnet</arg>
</arguments>
<msg timestamp="20150531 18:26:30.542" level="INFO">${result} = {u'name': u'', u'enable_dhcp': True, u'network_id': u'e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6', u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'dns_nameservers': [], u'ipv6_ra_mode': None, u'allocat...</msg>
<status status="PASS" endtime="20150531 18:26:30.542" starttime="20150531 18:26:30.541"></status>
</kw>
<kw type="kw" name="${SUBNETID} = Collections.Get From Dictionary">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>id</arg>
</arguments>
<msg timestamp="20150531 18:26:30.546" level="INFO">${SUBNETID} = 5840fdd1-9f2f-49a6-acd8-aa788d9bc94b</msg>
<status status="PASS" endtime="20150531 18:26:30.546" starttime="20150531 18:26:30.545"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20150531 18:26:30.549" level="INFO">{u'name': u'', u'enable_dhcp': True, u'network_id': u'e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6', u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'dns_nameservers': [], u'ipv6_ra_mode': None, u'allocation_pools': [{u'start': u'172.16.64.20', u'end': u'172.16.64.120'}], u'gateway_ip': u'172.16.64.1', u'ipv6_address_mode': None, u'ip_version': 4, u'host_routes': [], u'cidr': u'172.16.64.0/24', u'id': u'5840fdd1-9f2f-49a6-acd8-aa788d9bc94b', u'subnetpool_id': None}</msg>
<status status="PASS" endtime="20150531 18:26:30.550" starttime="20150531 18:26:30.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${SUBNETID}</arg>
</arguments>
<msg timestamp="20150531 18:26:30.554" level="INFO">5840fdd1-9f2f-49a6-acd8-aa788d9bc94b</msg>
<status status="PASS" endtime="20150531 18:26:30.554" starttime="20150531 18:26:30.552"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SUBNETID}</arg>
</arguments>
<msg timestamp="20150531 18:26:30.556" level="INFO">${SUBNETID} = 5840fdd1-9f2f-49a6-acd8-aa788d9bc94b</msg>
<status status="PASS" endtime="20150531 18:26:30.558" starttime="20150531 18:26:30.555"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20150531 18:26:32.564" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20150531 18:26:32.566" starttime="20150531 18:26:30.559"></status>
</kw>
<doc>Create new subnet in OpenStack</doc>
<tags>
<tag>Create Subnet OpenStack Neutron</tag>
</tags>
<status status="PASS" endtime="20150531 18:26:32.577" critical="yes" starttime="20150531 18:26:30.210"></status>
</test>
<test id="s1-s2-t3" name="Check New subnet">
<kw type="kw" name="${resp} = RequestsLibrary.Get">
<doc>Send a GET request on the session object found using the given `alias`</doc>
<arguments>
<arg>OSSession</arg>
<arg>${OSREST}/${SUBNETID}</arg>
</arguments>
<msg timestamp="20150531 18:26:32.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20150531 18:26:32.772" starttime="20150531 18:26:32.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20150531 18:26:32.781" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:32.782" starttime="20150531 18:26:32.773"></status>
</kw>
<doc>Check new subnet created in OpenStack</doc>
<tags>
<tag>Check</tag>
<tag>subnet OpenStack Neutron</tag>
</tags>
<status status="PASS" endtime="20150531 18:26:32.783" critical="yes" starttime="20150531 18:26:32.587"></status>
</test>
<kw type="teardown" name="RequestsLibrary.Delete All Sessions">
<doc>Removes all the session objects</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150531 18:26:32.791" starttime="20150531 18:26:32.791"></status>
</kw>
<doc>Checking Subnets created in OpenStack</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20150531 18:26:32.791" starttime="20150531 18:26:30.070"></status>
</suite>
<suite source="/home/tsubo/devel/robotframework_for_openstack/tests/030__ports.robot" id="s1-s3" name="Ports">
<kw type="setup" name="RequestsLibrary.Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>OSSession</arg>
<arg>http://${OPENSTACK}:9696</arg>
<arg>headers=${X-AUTH}</arg>
</arguments>
<msg timestamp="20150531 18:26:32.971" level="INFO">Argument types are:
&lt;type 'bool'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:32.971" starttime="20150531 18:26:32.966"></status>
</kw>
<test id="s1-s3-t1" name="Check OpenStack ports">
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${X-AUTH}</arg>
</arguments>
<msg timestamp="20150531 18:26:32.985" level="INFO">{u'X-Auth-Token': u'c01805c101cb4ea98f04c1a6f3e825b5', u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20150531 18:26:32.985" starttime="20150531 18:26:32.985"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Get">
<doc>Send a GET request on the session object found using the given `alias`</doc>
<arguments>
<arg>OSSession</arg>
<arg>${OSREST}</arg>
</arguments>
<msg timestamp="20150531 18:26:33.032" level="INFO">Starting new HTTP connection (1): 127.0.0.1</msg>
<msg timestamp="20150531 18:26:33.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20150531 18:26:33.490" starttime="20150531 18:26:33.001"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20150531 18:26:33.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:33.512" starttime="20150531 18:26:33.499"></status>
</kw>
<kw type="kw" name="${OSResult} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20150531 18:26:33.520" level="INFO">${OSResult} = {u'ports': [{u'status': u'ACTIVE', u'binding:host_id': u'simpleRouter', u'name': u'', u'allowed_address_pairs': [], u'admin_state_up': True, u'network_id': u'0de3ed6a-0a71-4b4b-a2fa-539053a3cc2b', u't...</msg>
<status status="PASS" endtime="20150531 18:26:33.519" starttime="20150531 18:26:33.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${OSResult}</arg>
</arguments>
<msg timestamp="20150531 18:26:33.526" level="INFO">${OSResult} = {u'ports': [{u'status': u'ACTIVE', u'binding:host_id': u'simpleRouter', u'name': u'', u'allowed_address_pairs': [], u'admin_state_up': True, u'network_id': u'0de3ed6a-0a71-4b4b-a2fa-539053a3cc2b', u't...</msg>
<status status="PASS" endtime="20150531 18:26:33.526" starttime="20150531 18:26:33.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${OSResult}</arg>
</arguments>
<msg timestamp="20150531 18:26:33.530" level="INFO">{u'ports': [{u'status': u'ACTIVE', u'binding:host_id': u'simpleRouter', u'name': u'', u'allowed_address_pairs': [], u'admin_state_up': True, u'network_id': u'0de3ed6a-0a71-4b4b-a2fa-539053a3cc2b', u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'extra_dhcp_opts': [], u'mac_address': u'fa:16:3e:55:25:43', u'binding:vif_details': {u'port_filter': True, u'ovs_hybrid_plug': True}, u'binding:vif_type': u'ovs', u'device_owner': u'network:dhcp', u'binding:profile': {}, u'port_security_enabled': False, u'binding:vnic_type': u'normal', u'fixed_ips': [{u'subnet_id': u'9d7eba48-2411-4b63-8584-8409a4677596', u'ip_address': u'172.16.64.20'}], u'id': u'0246c7ed-b01a-4fbb-97c1-3d8e08b3931e', u'security_groups': [], u'device_id': u'dhcpbfa245fc-1594-555b-92c7-d6b479c3e626-0de3ed6a-0a71-4b4b-a2fa-539053a3cc2b'}, {u'status': u'ACTIVE', u'binding:host_id': u'simpleRouter', u'name': u'', u'allowed_address_pairs': [], u'admin_state_up': True, u'network_id': u'9f619f06-e89b-4900-a557-0ccf481694c4', u'tenant_id': u'69095fd2f05542c1a156b45064a9f689', u'extra_dhcp_opts': [], u'mac_address': u'fa:16:3e:e2:53:70', u'binding:vif_details': {u'port_filter': True, u'ovs_hybrid_plug': True}, u'binding:vif_type': u'ovs', u'device_owner': u'network:router_interface', u'binding:profile': {}, u'port_security_enabled': False, u'binding:vnic_type': u'normal', u'fixed_ips': [{u'subnet_id': u'8f353f1a-3534-4a10-99f8-f4d35072834d', u'ip_address': u'fd71:1353:9363::1'}], u'id': u'10dca80b-345b-446f-893f-d1ca7279f8a3', u'security_groups': [], u'device_id': u'f79d3ce4-d6f5-4fda-95ad-c094073d031e'}, {u'status': u'DOWN', u'binding:host_id': u'', u'name': u'', u'allowed_address_pairs': [], u'admin_state_up': True, u'network_id': u'0de3ed6a-0a71-4b4b-a2fa-539053a3cc2b', u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'extra_dhcp_opts': [], u'mac_address': u'fa:16:3e:29:f1:78', u'binding:vif_details': {}, u'binding:vif_type': u'unbound', u'device_owner': u'', u'binding:profile': {}, u'port_security_enabled': True, u'binding:vnic_type': u'normal', u'fixed_ips': [{u'subnet_id': u'9d7eba48-2411-4b63-8584-8409a4677596', u'ip_address': u'172.16.64.21'}], u'id': u'50e2213d-adc3-4cc2-924b-b51595068867', u'security_groups': [u'656b2edf-1dda-4bc8-b70c-77b350492bfb'], u'device_id': u''}, {u'status': u'DOWN', u'binding:host_id': u'simpleRouter', u'name': u'', u'allowed_address_pairs': [], u'admin_state_up': True, u'network_id': u'9f619f06-e89b-4900-a557-0ccf481694c4', u'tenant_id': u'69095fd2f05542c1a156b45064a9f689', u'extra_dhcp_opts': [], u'mac_address': u'fa:16:3e:57:bb:76', u'binding:vif_details': {u'port_filter': True, u'ovs_hybrid_plug': True}, u'binding:vif_type': u'ovs', u'device_owner': u'network:router_interface', u'binding:profile': {}, u'port_security_enabled': False, u'binding:vnic_type': u'normal', u'fixed_ips': [{u'subnet_id': u'24585fe9-41c7-484e-9320-cda30c8e97c2', u'ip_address': u'10.0.0.1'}], u'id': u'982b75ca-7221-4c8d-b778-6cb3878419af', u'security_groups': [], u'device_id': u'f79d3ce4-d6f5-4fda-95ad-c094073d031e'}, {u'status': u'ACTIVE', u'binding:host_id': u'simpleRouter', u'name': u'', u'allowed_address_pairs': [], u'admin_state_up': True, u'network_id': u'7b339463-bde2-4fba-aa9e-99e71c4d5bd6', u'tenant_id': u'', u'extra_dhcp_opts': [], u'mac_address': u'fa:16:3e:2c:fd:19', u'binding:vif_details': {u'port_filter': True, u'ovs_hybrid_plug': True}, u'binding:vif_type': u'ovs', u'device_owner': u'network:router_gateway', u'binding:profile': {}, u'port_security_enabled': False, u'binding:vnic_type': u'normal', u'fixed_ips': [{u'subnet_id': u'577c2353-6490-4a9b-9bb5-da3f2f22883b', u'ip_address': u'172.24.4.2'}, {u'subnet_id': u'7bb2052d-b5fa-4ece-81d3-c4af7b1f9489', u'ip_address': u'2001:db8::1'}], u'id': u'bbc78415-e97b-4b7d-9aa2-5f5b04af387b', u'security_groups': [], u'device_id': u'f79d3ce4-d6f5-4fda-95ad-c094073d031e'}, {u'status': u'DOWN', u'binding:host_id': u'simpleRouter', u'name': u'', u'allowed_address_pairs': [], u'admin_state_up': True, u'network_id': u'9f619f06-e89b-4900-a557-0ccf481694c4', u'tenant_id': u'69095fd2f05542c1a156b45064a9f689', u'extra_dhcp_opts': [], u'mac_address': u'fa:16:3e:5d:73:75', u'binding:vif_details': {u'port_filter': True, u'ovs_hybrid_plug': True}, u'binding:vif_type': u'ovs', u'device_owner': u'network:dhcp', u'binding:profile': {}, u'port_security_enabled': False, u'binding:vnic_type': u'normal', u'fixed_ips': [{u'subnet_id': u'24585fe9-41c7-484e-9320-cda30c8e97c2', u'ip_address': u'10.0.0.2'}, {u'subnet_id': u'8f353f1a-3534-4a10-99f8-f4d35072834d', u'ip_address': u'fd71:1353:9363:0:f816:3eff:fe5d:7375'}], u'id': u'ce283609-0d79-4448-8309-ef72e3d83aab', u'security_groups': [], u'device_id': u'dhcpbfa245fc-1594-555b-92c7-d6b479c3e626-9f619f06-e89b-4900-a557-0ccf481694c4'}, {u'status': u'BUILD', u'binding:host_id': u'simpleRouter', u'name': u'', u'allowed_address_pairs': [], u'admin_state_up': True, u'network_id': u'e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6', u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'extra_dhcp_opts': [], u'mac_address': u'fa:16:3e:7e:5c:7a', u'binding:vif_details': {u'port_filter': True, u'ovs_hybrid_plug': True}, u'binding:vif_type': u'ovs', u'device_owner': u'network:dhcp', u'binding:profile': {}, u'port_security_enabled': False, u'binding:vnic_type': u'normal', u'fixed_ips': [{u'subnet_id': u'5840fdd1-9f2f-49a6-acd8-aa788d9bc94b', u'ip_address': u'172.16.64.20'}], u'id': u'ed9990a0-d911-4179-905e-1dfb802b0914', u'security_groups': [], u'device_id': u'dhcpbfa245fc-1594-555b-92c7-d6b479c3e626-e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6'}]}</msg>
<status status="PASS" endtime="20150531 18:26:33.537" starttime="20150531 18:26:33.528"></status>
</kw>
<doc>Checking OpenStack Neutron for known ports</doc>
<tags>
<tag>Ports Neutron OpenStack</tag>
</tags>
<status status="PASS" endtime="20150531 18:26:33.539" critical="yes" starttime="20150531 18:26:32.971"></status>
</test>
<test id="s1-s3-t2" name="Create New Port">
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20150531 18:26:33.550" level="INFO">{"port":{"network_id":"e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6","admin_state_up": true}}</msg>
<status status="PASS" endtime="20150531 18:26:33.550" starttime="20150531 18:26:33.549"></status>
</kw>
<kw type="kw" name="${resp} = RequestsLibrary.Post">
<doc>Send a POST request on the session object found using the given `alias`</doc>
<arguments>
<arg>OSSession</arg>
<arg>${OSREST}</arg>
<arg>data=${data}</arg>
</arguments>
<msg timestamp="20150531 18:26:35.210" level="INFO">${resp} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20150531 18:26:35.210" starttime="20150531 18:26:33.553"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20150531 18:26:35.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:35.216" starttime="20150531 18:26:35.214"></status>
</kw>
<kw type="kw" name="${result} = RequestsLibrary.To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20150531 18:26:35.219" level="INFO">${result} = {u'port': {u'status': u'DOWN', u'binding:host_id': u'', u'name': u'', u'allowed_address_pairs': [], u'admin_state_up': True, u'network_id': u'e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6', u'tenant_id': u'a77...</msg>
<status status="PASS" endtime="20150531 18:26:35.219" starttime="20150531 18:26:35.218"></status>
</kw>
<kw type="kw" name="${result} = Collections.Get From Dictionary">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20150531 18:26:35.222" level="INFO">${result} = {u'status': u'DOWN', u'binding:host_id': u'', u'name': u'', u'allowed_address_pairs': [], u'admin_state_up': True, u'network_id': u'e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6', u'tenant_id': u'a771f82d4afc4...</msg>
<status status="PASS" endtime="20150531 18:26:35.222" starttime="20150531 18:26:35.221"></status>
</kw>
<kw type="kw" name="${PORTID} = Collections.Get From Dictionary">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>id</arg>
</arguments>
<msg timestamp="20150531 18:26:35.225" level="INFO">${PORTID} = 2c3f209f-c0bd-43f9-b04a-79f6042a883b</msg>
<status status="PASS" endtime="20150531 18:26:35.225" starttime="20150531 18:26:35.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20150531 18:26:35.232" level="INFO">{u'status': u'DOWN', u'binding:host_id': u'', u'name': u'', u'allowed_address_pairs': [], u'admin_state_up': True, u'network_id': u'e9cd4aab-d9ee-4222-85f3-ffc31b9fcac6', u'tenant_id': u'a771f82d4afc496487877ef96f672971', u'binding:vif_details': {}, u'mac_address': u'fa:16:3e:9c:9e:eb', u'binding:vnic_type': u'normal', u'binding:vif_type': u'unbound', u'device_owner': u'', u'port_security_enabled': True, u'binding:profile': {}, u'fixed_ips': [{u'subnet_id': u'5840fdd1-9f2f-49a6-acd8-aa788d9bc94b', u'ip_address': u'172.16.64.21'}], u'id': u'2c3f209f-c0bd-43f9-b04a-79f6042a883b', u'security_groups': [u'656b2edf-1dda-4bc8-b70c-77b350492bfb'], u'device_id': u''}</msg>
<status status="PASS" endtime="20150531 18:26:35.238" starttime="20150531 18:26:35.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${PORTID}</arg>
</arguments>
<msg timestamp="20150531 18:26:35.242" level="INFO">2c3f209f-c0bd-43f9-b04a-79f6042a883b</msg>
<status status="PASS" endtime="20150531 18:26:35.242" starttime="20150531 18:26:35.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${PORTID}</arg>
</arguments>
<msg timestamp="20150531 18:26:35.245" level="INFO">${PORTID} = 2c3f209f-c0bd-43f9-b04a-79f6042a883b</msg>
<status status="PASS" endtime="20150531 18:26:35.245" starttime="20150531 18:26:35.245"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20150531 18:26:37.252" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20150531 18:26:37.252" starttime="20150531 18:26:35.248"></status>
</kw>
<doc>Create new port in OpenStack</doc>
<tags>
<tag>Create port OpenStack Neutron</tag>
</tags>
<status status="PASS" endtime="20150531 18:26:37.255" critical="yes" starttime="20150531 18:26:33.544"></status>
</test>
<test id="s1-s3-t3" name="Check New Port">
<kw type="kw" name="${resp} = RequestsLibrary.Get">
<doc>Send a GET request on the session object found using the given `alias`</doc>
<arguments>
<arg>OSSession</arg>
<arg>${OSREST}/${PORTID}</arg>
</arguments>
<msg timestamp="20150531 18:26:37.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20150531 18:26:37.354" starttime="20150531 18:26:37.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20150531 18:26:37.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150531 18:26:37.365" starttime="20150531 18:26:37.359"></status>
</kw>
<doc>Check new subnet created in OpenStack</doc>
<tags>
<tag>Check</tag>
<tag>subnet OpenStack Neutron</tag>
</tags>
<status status="PASS" endtime="20150531 18:26:37.365" critical="yes" starttime="20150531 18:26:37.259"></status>
</test>
<kw type="teardown" name="RequestsLibrary.Delete All Sessions">
<doc>Removes all the session objects</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150531 18:26:37.377" starttime="20150531 18:26:37.377"></status>
</kw>
<doc>Checking Port created in OpenStack</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20150531 18:26:37.378" starttime="20150531 18:26:32.802"></status>
</suite>
<kw type="teardown" name="Stop Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="RequestsLibrary.Delete All Sessions">
<doc>Removes all the session objects</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150531 18:26:37.396" starttime="20150531 18:26:37.395"></status>
</kw>
<status status="PASS" endtime="20150531 18:26:37.396" starttime="20150531 18:26:37.387"></status>
</kw>
<doc>Test suite for Neutron</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20150531 18:26:37.400" starttime="20150531 18:26:18.477"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="9">Critical Tests</stat>
<stat fail="0" pass="9">All Tests</stat>
</total>
<tag>
<stat info="" links="" doc="" combined="" pass="3" fail="0">Check</stat>
<stat info="" links="" doc="" combined="" pass="1" fail="0">Create Network OpenStack Neutron</stat>
<stat info="" links="" doc="" combined="" pass="1" fail="0">Create port OpenStack Neutron</stat>
<stat info="" links="" doc="" combined="" pass="1" fail="0">Create Subnet OpenStack Neutron</stat>
<stat info="" links="" doc="" combined="" pass="1" fail="0">Network</stat>
<stat info="" links="" doc="" combined="" pass="1" fail="0">Network Neutron OpenStack</stat>
<stat info="" links="" doc="" combined="" pass="1" fail="0">OpenStack Neutron</stat>
<stat info="" links="" doc="" combined="" pass="1" fail="0">Ports Neutron OpenStack</stat>
<stat info="" links="" doc="" combined="" pass="2" fail="0">subnet OpenStack Neutron</stat>
<stat info="" links="" doc="" combined="" pass="1" fail="0">Subnets Neutron OpenStack</stat>
</tag>
<suite>
<stat fail="0" pass="9" id="s1" name="Tests">Tests</stat>
<stat fail="0" pass="3" id="s1-s1" name="Networks">Tests.Networks</stat>
<stat fail="0" pass="3" id="s1-s2" name="Subnets">Tests.Subnets</stat>
<stat fail="0" pass="3" id="s1-s3" name="Ports">Tests.Ports</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
